package com.wufeiqun.zeus.biz.celery;

import com.wufeiqun.zeus.biz.celery.entity.CeleryCicdBuildForm;
import com.wufeiqun.zeus.biz.celery.entity.CeleryCicdDeployForm;
import com.wufeiqun.zeus.biz.cicd.entity.CicdBuildContext;
import com.wufeiqun.zeus.biz.cicd.entity.CicdDeployContext;
import com.wufeiqun.zeus.biz.cicd.enums.ArtifactTypeEnum;
import com.wufeiqun.zeus.service.IApplicationResourceRelationService;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

/**
 * @author wufeiqun
 * @date 2022-08-18
 * 运维平台跟异步任务交互参数构建
 */
@Service
@RequiredArgsConstructor
public class CeleryTaskParamBuilder {
    private final IApplicationResourceRelationService applicationResourceRelationService;


    /**
     * 构造调用celery异步构建任务的参数
     */
    public CeleryCicdBuildForm createCicdBuildForm(CicdBuildContext context){
        CeleryCicdBuildForm form = new CeleryCicdBuildForm();
        form.setAppCode(context.getRunBuildForm().getAppCode());
        form.setBuildRecordId(context.getBuildRecordId());
        form.setEnvCode(context.getRunBuildForm().getEnvCode());
        // 用户选择分支以后使用会用选择的分支, 用户没有选择的时候使用默认的分支
        form.setBranch(context.getBuildBranch());
        form.setGit(context.getApplicationDeployConfig().getGit());
        form.setTag(context.getBuildTag());
        // pkgPath
        // 如果是常规前端的话, 打包阶段的产物是dist目录, 为了跟后端的类似, 统一后续的流程, 需要搞成一个文件
        // 前端打包后会把dist目录压缩成 `{appCode}-{buildRecordId}.tgz`
        // 另外运维平台会弱化异步任务的复杂度, 参数校验等前置到运维平台项目中, 让运维异步任务专心执行任务, 项目也看着很简洁
        // 前端默认的构建目录是 `dist`
        if (ArtifactTypeEnum.STATICFE.getType().equals(context.getApplicationDeployConfig().getArtifactType())){
            if (StringUtils.isEmpty(context.getApplicationDeployConfig().getArtifactPath())){
                form.setPkgPath("dist");
            } else {
                form.setPkgPath(context.getApplicationDeployConfig().getArtifactPath());
            }
        } else {
            form.setPkgPath(context.getApplicationDeployConfig().getArtifactPath());
        }
        if (ArtifactTypeEnum.STATICFE.getType().equals(context.getApplicationDeployConfig().getArtifactType())
        || ArtifactTypeEnum.NODE.getType().equals(context.getApplicationDeployConfig().getArtifactType())){
            form.setReInstallDependency(context.getRunBuildForm().getReInstallDependency());
        }
        form.setRuntimeVersion(context.getApplicationDeployConfig().getRuntimeVersion());
        form.setPkgType(context.getApplicationDeployConfig().getArtifactType());
        form.setPkgName(context.getApplicationDeployConfig().getArtifactName());
        form.setProfile(context.getApplicationDeployConfig().getProfile());
        form.setBuildExtraArgs(context.getApplicationDeployConfig().getBuildExtraArgs());

        if (ArtifactTypeEnum.JAR.getType().equals(context.getApplicationDeployConfig().getArtifactType())
        || ArtifactTypeEnum.NODE.getType().equals(context.getApplicationDeployConfig().getArtifactType())){
            String combinedArgs;
            if (StringUtils.isEmpty(context.getAutoGeneratedRunExtraArgs())){
                 combinedArgs = context.getApplicationDeployConfig().getRunExtraArgs();
            } else {
                 combinedArgs = context.getAutoGeneratedRunExtraArgs() + " " +
                        context.getApplicationDeployConfig().getRunExtraArgs();
            }

            form.setRunExtraArgs(combinedArgs);
            // 是否开启容器化
            form.setContainerized(context.getApplicationDeployConfig().getContainerized());
        }
        // 子模块相关配置, 目前只有前端/node项目会用到
        // 应用使用的Dockerfile模板
        form.setDockerfileTemplateName(context.getApplicationDeployConfig().getDockerfileTemplateName());
        return form;
    }

    /**
     * 构造调用celery异步发布任务的参数
     */
    public CeleryCicdDeployForm createCicdDeployForm(CicdDeployContext context){
        CeleryCicdDeployForm form = new CeleryCicdDeployForm();

        form.setEnvCode(context.getRunDeployForm().getEnvCode());
        form.setAppCode(context.getRunDeployForm().getAppCode());
        form.setPkgType(context.getApplicationDeployConfig().getArtifactType());
        form.setInitialDelaySeconds(context.getApplicationDeployConfig().getInitialDelaySeconds());
        if (ArtifactTypeEnum.STATICFE.getType().equals(context.getApplicationDeployConfig().getArtifactType())){
            if (StringUtils.isEmpty(context.getApplicationDeployConfig().getArtifactPath())){
                form.setPkgPath("dist");
            } else {
                form.setPkgPath(context.getApplicationDeployConfig().getArtifactPath());
            }
        } else {
            form.setPkgPath(context.getApplicationDeployConfig().getArtifactPath());
        }
        form.setPkgName(context.getApplicationDeployConfig().getArtifactName());
        form.setPkgUrl(context.getBuildRecord().getBuildTargetUrl());
        form.setServerIp(context.getRunDeployForm().getServerIp());
        form.setDeployRecordId(context.getDeployRecordId());
        form.setHttpPort(context.getApplicationDeployConfig().getPort());
        form.setProbeType(context.getApplicationDeployConfig().getProbeType());
        form.setHealthCheckUri(context.getApplicationDeployConfig().getHealthCheckUri());
        form.setDockerMode(context.getRunDeployForm().getDockerDeploy());
        form.setDeploymentYaml(context.getDeploymentYaml());
        form.setServiceYaml(context.getServiceYaml());
        form.setNamespace(context.getApplicationDeployConfig().getKubernetesNamespace());
        form.setIsRollback(context.getRunDeployForm().getIsRollback());
        return form;
    }

}
